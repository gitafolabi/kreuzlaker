# name: test_whole_stack_snapshot
  dict({
    'Parameters': dict({
      'BootstrapVersion': dict({
        'Default': '/cdk-bootstrap/hnb659fds/version',
        'Description': 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
        'Type': 'AWS::SSM::Parameter::Value<String>',
      }),
    }),
    'Resources': dict({
      'converttoparquetjourneys2F8DA4E1': dict({
        'Properties': dict({
          'Command': dict({
            'Name': 'glueetl',
            'PythonVersion': '3',
            'ScriptLocation': dict({
              'Fn::Join': list([
                '',
                list([
                  's3://',
                  dict({
                    'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                  }),
                  '/a0f7b030c2c343dbc460b01b28ed5da6e067e3a014ef45a1b0ae04b5e2b2aae2.py',
                ]),
              ]),
            }),
          }),
          'DefaultArguments': dict({
            '--SOURCE_BUCKET_URI': dict({
              'Fn::Join': list([
                '',
                list([
                  's3://',
                  dict({
                    'Ref': 'xwbatchbucketraw82D91BD7',
                  }),
                  '/raw/scoofy/journeys/',
                ]),
              ]),
            }),
            '--SOURCE_COMPRESSION_TYPE': 'gzip',
            '--SOURCE_FORMAT': 'json',
            '--SOURCE_PARTITION_VAR': 'start_dt',
            '--TARGET_BUCKET_URI': dict({
              'Fn::Join': list([
                '',
                list([
                  's3://',
                  dict({
                    'Ref': 'xwbatchbucketraw82D91BD7',
                  }),
                  '/converted/journeys',
                ]),
              ]),
            }),
            '--TARGET_COMPRESSION_TYPE': 'snappy',
            '--TARGET_DB_NAME': 'data_lake_converted',
            '--TARGET_FORMAT': 'glueparquet',
            '--TARGET_TABLE_NAME': 'journeys',
            '--enable-continuous-cloudwatch-log': 'true',
            '--enable-continuous-log-filter': 'true',
            '--extra-py-files': dict({
              'Fn::Join': list([
                '',
                list([
                  's3://',
                  dict({
                    'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                  }),
                  '/75319734a952b0132e63ffecf345eb0e47cac90ecd878db57b38e4aaf85e7f51.zip',
                ]),
              ]),
            }),
            '--job-bookmark-option': 'job-bookmark-enable',
            '--job-language': 'python',
          }),
          'Description': "Converts raw data to snappy-compressed parquet files partitioned on _created_at and adds it as a new table into the 'data_lake_converted' database ",
          'GlueVersion': '3.0',
          'MaxRetries': 1,
          'NumberOfWorkers': 2,
          'Role': dict({
            'Fn::GetAtt': list([
              's3rawconvertedaccessglue81E2EC83',
              'Arn',
            ]),
          }),
          'WorkerType': 'G.1X',
        }),
        'Type': 'AWS::Glue::Job',
      }),
      'copyscoofyexampledataAwsCliLayer0B12F367': dict({
        'Properties': dict({
          'Content': dict({
            'S3Bucket': dict({
              'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
            }),
            'S3Key': '731f24951dbe4e08bfc519dd7c23a4f7158528bd5557e38437b08292ab2a873c.zip',
          }),
          'Description': '/opt/awscli/aws',
        }),
        'Type': 'AWS::Lambda::LayerVersion',
      }),
      'copyscoofyexampledatacopydatalambda6DC3D084': dict({
        'DependsOn': list([
          'copyscoofyexampledatacopydatalambdaServiceRoleDefaultPolicy61CBCF63',
          'copyscoofyexampledatacopydatalambdaServiceRoleA6128E3E',
          'xwbatchbucketraw82D91BD7',
        ]),
        'Properties': dict({
          'Code': dict({
            'S3Bucket': dict({
              'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
            }),
            'S3Key': '2f222a702c386229901f889a0ccf80da74b272ef467e20323bafafe45ef574bf.zip',
          }),
          'Environment': dict({
            'Variables': dict({
              'SOURCE_BUCKET_URI': 's3://xw-d13g-scoofy-data-inputs/data/journeys',
              'TARGET_BUCKET_URI': dict({
                'Fn::Join': list([
                  '',
                  list([
                    's3://',
                    dict({
                      'Ref': 'xwbatchbucketraw82D91BD7',
                    }),
                    '/raw/scoofy/journeys/',
                  ]),
                ]),
              }),
            }),
          }),
          'Handler': 'copyjob_for_s3_data.sync_bucket_uri',
          'Layers': list([
            dict({
              'Ref': 'copyscoofyexampledataAwsCliLayer0B12F367',
            }),
          ]),
          'Role': dict({
            'Fn::GetAtt': list([
              'copyscoofyexampledatacopydatalambdaServiceRoleA6128E3E',
              'Arn',
            ]),
          }),
          'Runtime': 'python3.9',
          'Timeout': 900,
        }),
        'Type': 'AWS::Lambda::Function',
      }),
      'copyscoofyexampledatacopydatalambdaServiceRoleA6128E3E': dict({
        'DependsOn': list([
          'xwbatchbucketraw82D91BD7',
        ]),
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'lambda.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      'copyscoofyexampledatacopydatalambdaServiceRoleDefaultPolicy61CBCF63': dict({
        'DependsOn': list([
          'xwbatchbucketraw82D91BD7',
        ]),
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                  's3:DeleteObject*',
                  's3:PutObject',
                  's3:PutObjectLegalHold',
                  's3:PutObjectRetention',
                  's3:PutObjectTagging',
                  's3:PutObjectVersionTagging',
                  's3:Abort*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  dict({
                    'Fn::GetAtt': list([
                      'xwbatchbucketraw82D91BD7',
                      'Arn',
                    ]),
                  }),
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        dict({
                          'Fn::GetAtt': list([
                            'xwbatchbucketraw82D91BD7',
                            'Arn',
                          ]),
                        }),
                        '/*',
                      ]),
                    ]),
                  }),
                ]),
              }),
              dict({
                'Action': list([
                  's3:GetObject',
                  's3:ListBucket',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  'arn:aws:s3:::xw-d13g-scoofy-data-inputs/*',
                  'arn:aws:s3:::xw-d13g-scoofy-data-inputs',
                ]),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 'copyscoofyexampledatacopydatalambdaServiceRoleDefaultPolicy61CBCF63',
          'Roles': list([
            dict({
              'Ref': 'copyscoofyexampledatacopydatalambdaServiceRoleA6128E3E',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
      'copyscoofyexampledatasynchronrule11928A70': dict({
        'Properties': dict({
          'ScheduleExpression': 'cron(10 * ? * * *)',
          'State': 'ENABLED',
          'Targets': list([
            dict({
              'Arn': dict({
                'Fn::GetAtt': list([
                  'copyscoofyexampledatacopydatalambda6DC3D084',
                  'Arn',
                ]),
              }),
              'Id': 'Target0',
            }),
          ]),
        }),
        'Type': 'AWS::Events::Rule',
      }),
      'copyscoofyexampledatasynchronruleAllowEventRulexwbatchcopyscoofyexampledatacopydatalambda66B488F7F742C9D4': dict({
        'Properties': dict({
          'Action': 'lambda:InvokeFunction',
          'FunctionName': dict({
            'Fn::GetAtt': list([
              'copyscoofyexampledatacopydatalambda6DC3D084',
              'Arn',
            ]),
          }),
          'Principal': 'events.amazonaws.com',
          'SourceArn': dict({
            'Fn::GetAtt': list([
              'copyscoofyexampledatasynchronrule11928A70',
              'Arn',
            ]),
          }),
        }),
        'Type': 'AWS::Lambda::Permission',
      }),
      'datalakeconvertedF1701755': dict({
        'Properties': dict({
          'CatalogId': dict({
            'Ref': 'AWS::AccountId',
          }),
          'DatabaseInput': dict({
            'Name': 'data_lake_converted',
          }),
        }),
        'Type': 'AWS::Glue::Database',
      }),
      'orgusersandgroupsdatalakedebugging3664E396': dict({
        'Properties': dict({
          'GroupName': 'DataLakeDebugging',
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/CloudWatchReadOnlyAccess',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Group',
      }),
      'orgusersandgroupsdatalakedebuggingDefaultPolicy32A36971': dict({
        'Properties': dict({
          'Groups': list([
            dict({
              'Ref': 'orgusersandgroupsdatalakedebugging3664E396',
            }),
          ]),
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  dict({
                    'Fn::GetAtt': list([
                      'xwbatchbucketraw82D91BD7',
                      'Arn',
                    ]),
                  }),
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        dict({
                          'Fn::GetAtt': list([
                            'xwbatchbucketraw82D91BD7',
                            'Arn',
                          ]),
                        }),
                        '/*',
                      ]),
                    ]),
                  }),
                ]),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 'orgusersandgroupsdatalakedebuggingDefaultPolicy32A36971',
        }),
        'Type': 'AWS::IAM::Policy',
      }),
      'orgusersandgroupspolicyallowpasswordchanges7A9EFD98': dict({
        'Properties': dict({
          'Description': '',
          'ManagedPolicyName': 'AllowPasswordChanges',
          'Path': '/',
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'iam:GetAccountPasswordPolicy',
                'Effect': 'Allow',
                'Resource': '*',
                'Sid': 'ViewAccountPasswordRequirements',
              }),
              dict({
                'Action': list([
                  'iam:GetUser',
                  'iam:ChangePassword',
                ]),
                'Effect': 'Allow',
                'Resource': 'arn:aws:iam::*:user/${aws:username}',
                'Sid': 'ChangeOwnPassword',
              }),
            ]),
            'Version': '2012-10-17',
          }),
        }),
        'Type': 'AWS::IAM::ManagedPolicy',
      }),
      'rawcrawlerrawscoofyjourneys': dict({
        'Properties': dict({
          'DatabaseName': 'data_lake_raw',
          'Name': 'rawcrawler--raw-scoofy-journeys-',
          'Role': dict({
            'Fn::GetAtt': list([
              's3rawaccessglueB6075F8D',
              'Arn',
            ]),
          }),
          'Targets': dict({
            'S3Targets': list([
              dict({
                'Path': dict({
                  'Fn::Join': list([
                    '',
                    list([
                      's3://',
                      dict({
                        'Ref': 'xwbatchbucketraw82D91BD7',
                      }),
                      '/raw/scoofy/journeys/',
                    ]),
                  ]),
                }),
              }),
            ]),
          }),
        }),
        'Type': 'AWS::Glue::Crawler',
      }),
      's3rawaccessglueB6075F8D': dict({
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'glue.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSGlueServiceRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      's3rawaccessglueDefaultPolicy31593007': dict({
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                  's3:DeleteObject*',
                  's3:PutObject',
                  's3:PutObjectLegalHold',
                  's3:PutObjectRetention',
                  's3:PutObjectTagging',
                  's3:PutObjectVersionTagging',
                  's3:Abort*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  dict({
                    'Fn::GetAtt': list([
                      'xwbatchbucketraw82D91BD7',
                      'Arn',
                    ]),
                  }),
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        dict({
                          'Fn::GetAtt': list([
                            'xwbatchbucketraw82D91BD7',
                            'Arn',
                          ]),
                        }),
                        '/*',
                      ]),
                    ]),
                  }),
                ]),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 's3rawaccessglueDefaultPolicy31593007',
          'Roles': list([
            dict({
              'Ref': 's3rawaccessglueB6075F8D',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
      's3rawconvertedaccessglue81E2EC83': dict({
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'glue.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSGlueServiceRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      's3rawconvertedaccessglueDefaultPolicy038FBE8D': dict({
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                  's3:DeleteObject*',
                  's3:PutObject',
                  's3:PutObjectLegalHold',
                  's3:PutObjectRetention',
                  's3:PutObjectTagging',
                  's3:PutObjectVersionTagging',
                  's3:Abort*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  dict({
                    'Fn::GetAtt': list([
                      'xwbatchbucketraw82D91BD7',
                      'Arn',
                    ]),
                  }),
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        dict({
                          'Fn::GetAtt': list([
                            'xwbatchbucketraw82D91BD7',
                            'Arn',
                          ]),
                        }),
                        '/*',
                      ]),
                    ]),
                  }),
                ]),
              }),
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        'arn:',
                        dict({
                          'Ref': 'AWS::Partition',
                        }),
                        ':s3:::',
                        dict({
                          'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                        }),
                      ]),
                    ]),
                  }),
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        'arn:',
                        dict({
                          'Ref': 'AWS::Partition',
                        }),
                        ':s3:::',
                        dict({
                          'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                        }),
                        '/75319734a952b0132e63ffecf345eb0e47cac90ecd878db57b38e4aaf85e7f51.zip',
                      ]),
                    ]),
                  }),
                ]),
              }),
              dict({
                'Action': list([
                  's3:GetObject*',
                  's3:GetBucket*',
                  's3:List*',
                ]),
                'Effect': 'Allow',
                'Resource': list([
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        'arn:',
                        dict({
                          'Ref': 'AWS::Partition',
                        }),
                        ':s3:::',
                        dict({
                          'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                        }),
                      ]),
                    ]),
                  }),
                  dict({
                    'Fn::Join': list([
                      '',
                      list([
                        'arn:',
                        dict({
                          'Ref': 'AWS::Partition',
                        }),
                        ':s3:::',
                        dict({
                          'Fn::Sub': 'cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}',
                        }),
                        '/*',
                      ]),
                    ]),
                  }),
                ]),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 's3rawconvertedaccessglueDefaultPolicy038FBE8D',
          'Roles': list([
            dict({
              'Ref': 's3rawconvertedaccessglue81E2EC83',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
      'xwbatchbucketraw82D91BD7': dict({
        'DeletionPolicy': 'Retain',
        'Type': 'AWS::S3::Bucket',
        'UpdateReplacePolicy': 'Retain',
      }),
    }),
    'Rules': dict({
      'CheckBootstrapVersion': dict({
        'Assertions': list([
          dict({
            'Assert': dict({
              'Fn::Not': list([
                dict({
                  'Fn::Contains': list([
                    list([
                      '1',
                      '2',
                      '3',
                      '4',
                      '5',
                    ]),
                    dict({
                      'Ref': 'BootstrapVersion',
                    }),
                  ]),
                }),
              ]),
            }),
            'AssertDescription': "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          }),
        ]),
      }),
    }),
  })
# ---
