PYTHON_SOURCE:=xw_batch tests lambda app.py

all: lint test deploy

.PHONY: deploy
deploy: .venv/install-packages-stamp node_modules/install-packages-stamp  ## Run cdk deploy (with --hotswap) and makes sure that everything is up to date beforehand
	node_modules/.bin/cdk deploy --hotswap

.PHONY: diff
diff: .venv/install-packages-stamp node_modules/install-packages-stamp  ## Run cdk diff
	node_modules/.bin/cdk diff

.PHONY: destroy
destroy: .venv/install-packages-stamp node_modules/install-packages-stamp  ## Run cdk destroy
	node_modules/.bin/cdk destroy

# idempotent, but quite long -> need to be run manually
.PHONY: bootstrap
bootstrap:  node_modules/install-packages-stamp ## Run cdk bootstrap
	node_modules/.bin/cdk bootstrap

.PHONY: test
test: .venv/install-dev-packages-stamp   ## Run all tests
	.venv/bin/python -m pytest tests

.PHONY: clean
clean:  ## Remove autogenerated files
	rm -rf cdk.out
	rm -rf .venv
	rm -rf node_modules


# From here on generic .venv handling with a requirements.txt lock file generated from requirements.txt.in
# + automatic dev tooling install from reqirements-dev.txt
# to install: make install-packages, but just depending on .venv/install-packages-stamp should be enough
# to update: add stuff to requirements.txt.in and run make update-packages (but should be automatic, too!)
# to format/lint: make format / make lint (will format before! and install tooling if not installed)

.PHONY: install-packages
install-packages: .venv/install-packages-stamp node_modules/install-packages-stamp  ## Install node (packages.json) and python packages (requirements.txt)

node_modules/install-packages-stamp: package-lock.json
	npm install
	touch $@

.venv/install-packages-stamp: .venv/bin/python requirements.txt
	.venv/bin/python -m pip install wheel pip --upgrade
	.venv/bin/python -m pip install -r requirements.txt
	touch $@

.PHONY: update-packages
update-packages: ## Update python and node packages by calling both their respective makefile targets
	make -j update-node-packages update-python-packages

.PHONY: update-node-packages
update-node-packages:  ## Update node packages, using the pinnings defined in packages.json
	npm update

.PHONY: update-python-packages
update-python-packages:  ## Update python packages by reinstalling everything in requirements.txt.in
	# clean up any dev packages
	rm -rf .venv
	rm -rf requirements.txt
	make requirements.txt

requirements.txt: requirements.txt.in
	rm -rf .venv
	make .venv/bin/python
	.venv/bin/python -m pip install --upgrade pip
	.venv/bin/python -m pip install -r requirements.txt.in --upgrade
	echo "# Autogenerate from requirements.txt.in by 'make update-packages' at $$(date +%Y-%m-%dT%H:%M)" > $@
	echo "# DO NOT CHANGE, changes will be overwritten!" >> $@
	echo "" >> $@
	.venv/bin/python -m pip freeze >> $@

.venv/bin/python:
	python3 -m venv .venv

.PHONY: install-dev-packages
install-dev-packages: .venv/install-packages-stamp .venv/install-dev-packages-stamp  ## Install developer packages from requirements-dev.txt

.venv/install-dev-packages-stamp: .venv/install-packages-stamp requirements-dev.txt
	.venv/bin/python -m pip install -r requirements-dev.txt --upgrade
	touch $@

.PHONY: format
format:  ## Run all code formatter
	make -j black isort

.PHONY: lint
lint: format  ## Run all linters
	make -j flake8 mypy

# tools
.PHONY: black
black: .venv/install-dev-packages-stamp  ## Format on all python files with black
	.venv/bin/python -m black $(PYTHON_SOURCE)

.PHONY: isort
isort: .venv/install-dev-packages-stamp  ## Sort all imports with isort in pyton files
	.venv/bin/python -m isort $(PYTHON_SOURCE)

.PHONY: flake8
flake8: .venv/install-dev-packages-stamp  ## Run flake8 on all python files
	.venv/bin/python -m flake8 $(PYTHON_SOURCE)

.PHONY: mypy
mypy: .venv/install-dev-packages-stamp ## Run mypy on all python files
	.venv/bin/python -m mypy $(PYTHON_SOURCE)

.PHONY: shell
shell: .venv/install-packages-stamp .venv/install-dev-packages-stamp node_modules/install-packages-stamp ## Run a shell with all required (incl. dev) commands in PATH
	# $${} to use the environment variables and not the (implicit) variables from the makefile
	@export PATH=$(PWD)/node_modules/.bin:$${PATH} && source .venv/bin/activate && exec $${SHELL}

help:     ## Show this help.
	@egrep -h '\s##\s' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-30s\033[0m %s\n", $$1, $$2}'
